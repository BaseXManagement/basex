########################################################################################################################
#   1) FILE CONFIG - GLOBAL: DATABASE OUTSIDE DOCKER CONTAINER
# * mvn clean install
# * `docker-compose up --build -d` (create/start containers)
# * to perm delete DB we need to delete docker + its volumes: 'docker-compose down -v'
########################################################################################################################

services:
  java-api:
    build: .                          # Use Dockerfile to build image
    image: java-basex-api:latest      # Name of the resulting image
    container_name: application       # Name of the resulting container
    ports:                            # External/internal port mapping:
      - 8080:8080
    depends_on:                       # Service(s) that this service depends on:
      basex-api-db:
          condition: service_healthy

  nodejs-api:
    build: .                          # Use Dockerfile to build image
    image: nodejs-basex-api:latest    # Name of the resulting image
    container_name: nodejs-api        # Name of the resulting container
    ports:                            # External/internal port mapping:
      - 5000:5000
    command: npm run dev              # Command to start the application
    depends_on:                       # Service(s) that this service depends on:
      nodejs-api-db:
          condition: service_healthy

  nodejs-api-db:
    image: mongo:latest               # Image used to create MongoDB container
    container_name: baseX-mongodb           # Name of the MongoDB container
    environment:                      # Environment variables for MongoDB container
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=baseX
    ports:
      - "27017:27017"                 # External/internal port mapping for MongoDB
    volumes:
      - mongodb_data:/data/db         # Volume for MongoDB data persistence
    healthcheck:                      # Command that, when ran, proves MongoDB container is healthy
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]

  basex-api-db:
    image: mysql:latest               # Image used to create MySQL container for java-api
    container_name: database-MYSQL
    environment:                      # Environment variables for the MySQL container
      - MYSQL_DATABASE=basex
      - MYSQL_ROOT_PASSWORD=password
    healthcheck:                      # Command that, when ran, proves MySQL container is healthy
      test: [ "CMD", "echo", "MySQL database container is healthy" ]
    ports:
      - "3306:3306"
    volumes:
      - db:/var/lib/mysql

volumes:
  mongodb_data:                       # Volume for MongoDB data
  db:                                 # Volume for MySQL data


########################################################################################################################
#   2) FILE CONFIG - GLOBAL: DATABASE CONTAINED IN DOCKER CONTAINER ONLY, and accessed via Docker Cont. only
# * mvn clean install
# * `docker-compose up --build -d` (create/start containers)
########################################################################################################################

#services:
#
#  basex-api-app:
#    build: .                          # Use Dockerfile to build image
#    image: basex-api:latest           # Name of the resulting image
#    container_name: applicationContainer       # Name of the resulting container
#    ports:                            # External/internal port mapping:
#      - 8080:8080
#    depends_on:                       # Service(s) that this service depends on:
#      basex-api-db:
#        condition: service_healthy
#    networks:                         # Local network for services (containers)
#      - network
#
#  basex-api-db:
#    image: mysql:latest               # Image used to create MySQL container
#    container_name: databaseContainer
#    environment:                      # Environment variables for the service (container):
#      - MYSQL_ROOT_PASSWORD=password
#      - MYSQL_DATABASE=basex
#    healthcheck:                      # Command that, when ran, proves service (container) is healthy
#      test: [ "CMD", "echo", "MySQL database container is healthy" ]
#    networks:
#      - network
#
#networks:
#  network:
#    driver: bridge
