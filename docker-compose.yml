########################################################################################################################
#                                  FILE CONFIG - GLOBAL: DATABASE OUTSIDE DOCKER CONTAINER
# * `docker-compose up --build -d` (create/start containers)
# * 'docker-compose down -v' (perm delete DB from Docker)
########################################################################################################################

services:
####################################################### Java API #######################################################
  basex-api-app:
    build:
      context: ./java_api             # Use Dockerfile to build image
    image: java-api:latest            # Name of the resulting image
    container_name: java-api          # Name of the resulting container
    ports:                            # External/internal port mapping:
      - 8080:8080
    depends_on:                       # Service(s) that this service depends on:
      basex-api-db:
        condition: service_healthy

  basex-api-db:
    image: mysql:latest               # Image used to create container (from Docker registry)
    container_name: java-data
    environment:                      # Environment variables for the service (container):
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=basex
    healthcheck:                      # Command that, when ran, proves service (container) is healthy
      test: [ "CMD", "echo", "MySQL database container is healthy" ]
    ports:
      - "3306:3306"
    volumes:
      - java_data:/var/lib/java_data

####################################################### NodeJS API ####################################################
  nodejs-api:
    build:
      context: ./nodejs_api           # Specify the path to the Node.js API directory
    image: nodejs-api:latest          # Name of the resulting image
    container_name: nodejs-api        # Name of the resulting container
    ports:                            # External/internal port mapping:
      - 5000:5000
    command: npm run dev              # Command to start the applications

  nodejs-data:
    image: mongo:latest               # Use the official MongoDB image
    container_name: nodejs-data       # Name of the MongoDB container
    environment:                      # Environment variables for MongoDB container
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: admin
    ports:
      - "27017:27017"                 # External/internal port mapping for MongoDB
    volumes:
      - nodejs_data:/data/nodejs_data # Volume for MongoDB data persistence
    healthcheck:                      # Command that checks if the MongoDB container is healthy
      test: ["CMD-SHELL", "mongo --eval \"db.adminCommand('ping')\" || exit 1"]
    restart: on-failure               # Restart the container if it fails

  ############################################### Frontend (React) Client #############################################
  client:
    build:
      context: ./client               # Specify the path to the React frontend directory
    image: client:latest              # Name of the resulting image
    container_name: client            # Name of the resulting container
    ports:
      - 3000:3000                     # External/internal port mapping for the React development server
    command: npm start                # Command to start the React development server

volumes:
  java_data:                          # Volume for MySQL data
  nodejs_data:                        # Volume for MongoDB data

########################################################################################################################
#       FILE CONFIG - GLOBAL: DATABASE CONTAINED IN DOCKER CONTAINER ONLY, and accessed via Docker Cont. only
# * mvn clean install
# * `docker-compose up --build -d` (create/start containers)
########################################################################################################################

#services:
#  basex-api-app:
#    build: .                          # Use Dockerfile to build image
#    image: basex-api:latest           # Name of the resulting image
#    container_name: applicationContainer       # Name of the resulting container
#    ports:                            # External/internal port mapping:
#      - 8080:8080
#    depends_on:                       # Service(s) that this service depends on:
#      basex-api-db:
#        condition: service_healthy
#    networks:                         # Local network for services (containers)
#      - network
#
#  basex-api-db:
#    image: mysql:latest               # Image used to create MySQL container
#    container_name: databaseContainer
#    environment:                      # Environment variables for the service (container):
#      - MYSQL_ROOT_PASSWORD=password
#      - MYSQL_DATABASE=basex
#    healthcheck:                      # Command that, when ran, proves service (container) is healthy
#      test: [ "CMD", "echo", "MySQL database container is healthy" ]
#    networks:
#      - network

#networks:
#  network:
#    driver: bridge
